---
// src/pages/rsvp/[hash].astro

import Layout from "@layouts/Layout.astro";
// We'll need these paths based on AstroPaper template structure
import Header from "@components/Header.astro";
import Main from "@layouts/Main.astro";

export async function getStaticPaths() {
  // For now, just return our test page
  return [
    {
      params: { hash: "123abc" },
      props: {
        invite_key: "Kevin and Maria Lalor",
        guests: [
          { name: "Kevin Lalor" },
          { name: "Maria Lalor" }
        ]
      }
    }
  ];
}

// Get our page data from getStaticPaths
const { invite_key, guests } = Astro.props;
---

<Layout title={`RSVP - ${invite_key}`}>
  <Header />
  <Main>
    <section class="prose mb-8">
      <h1 class="text-2xl font-bold mb-4">RSVP</h1>
      <p class="mb-4">Please confirm your attendance below:</p>

      <form id="rsvpForm" class="space-y-4">
        <!-- Hidden field for invite key -->
        <input type="hidden" name="invite_key" value={invite_key} />

        <!-- Guest checkboxes -->
        <div class="space-y-2">
          {guests.map(guest => (
            <div class="flex items-center">
              <input
                type="checkbox"
                id={guest.name}
                name="guest_names"
                value={guest.name}
                class="mr-2"
                style="cursor: pointer"
              />
              <label for={guest.name} style="cursor: pointer">{guest.name}</label>
            </div>
          ))}
        </div>

        <!-- Notes field -->
        <div>
          <label for="notes" class="block mb-2">Additional Notes:</label>
          <textarea
            id="notes"
            name="notes"
            rows="3"
            class="w-full p-2 border rounded"
          ></textarea>
        </div>

        <!-- Submit button -->
        <button
          type="submit"
          class="bg-skin-accent text-skin-inverted px-4 py-2 rounded"
        >
          Submit RSVP
        </button>
      </form>
    </section>
  </Main>
</Layout>

<script define:vars={{ formId: "1FAIpQLSdjXBjDMCrDuUKwp5sA3_w3MeRDC5Z_kQ-2gT3eUcTEs7qzLg" }}>
  const form = document.getElementById('rsvpForm');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData();

    // Get checked guests
    const checkedBoxes = form.querySelectorAll('input[name="guest_names"]:checked');
    const guestNames = Array.from(checkedBoxes).map(box => box.value);

    // Gather form data
    formData.append('entry.1910503431', form.querySelector('input[name="invite_key"]').value);
    formData.append('entry.1715372634', guestNames.length.toString());
    formData.append('entry.1831974976', JSON.stringify(guestNames));
    formData.append('entry.391972157', form.querySelector('#notes').value);

    try {
      const response = await fetch(
        `https://docs.google.com/forms/d/e/${formId}/formResponse`,
        {
          method: 'POST',
          mode: 'no-cors', // This is needed for Google Forms
          body: formData
        }
      );

      // Since we're using no-cors, we can't actually check the response
      // So we'll assume success if we get here
      form.innerHTML = '<div class="text-green-600">Thank you for your RSVP!</div>';
    } catch (error) {
      console.error('Error:', error);
      form.innerHTML += '<div class="text-red-600">There was an error submitting your RSVP. Please try again later.</div>';
    }
  });
</script>